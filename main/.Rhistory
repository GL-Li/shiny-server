mem_used
library(pryr)
mem_used()
library(ggplot2)
mem_used()
library(shiny)
mem_used()
library(shinydashboard)
mem_used()
library(data.table)
mem_used()
library(dplyr)
mem_used()
install.packages("quantmod")
plotlyCandleStick <- function(symbol = "MSFT",
fillcolor = "#ff6666",
hollowcolor = "#39ac73",
linewidth = 4,
plotcolor = "#3E3E3E",
papercolor = "#1E2022",
fontcolor = "#B3A78C",
startdate = "2015-01-01"){
# Get OHLC prices using quantmod
prices <- getSymbols(symbol, auto.assign = F)
prices <- prices[index(prices) >= startdate]
# Convert to dataframe
prices <- data.frame(time = index(prices),
open = as.numeric(prices[,1]),
high = as.numeric(prices[,2]),
low = as.numeric(prices[,3]),
close = as.numeric(prices[,4]),
volume = as.numeric(prices[,5]))
# Create line segments for high and low prices
plot.base <- data.frame()
plot.hollow <- data.frame()
plot.filled <- data.frame()
for(i in 1:nrow(prices)){
x <- prices[i, ]
# For high / low
mat <- rbind(c(x[1], x[3]),
c(x[1], x[4]),
c(NA, NA))
plot.base <- rbind(plot.base, mat)
# For open / close
if(x[2] > x[5]){
mat <- rbind(c(x[1], x[2]),
c(x[1], x[5]),
c(NA, NA))
plot.filled <- rbind(plot.filled, mat)
}else{
mat <- rbind(c(x[1], x[2]),
c(x[1], x[5]),
c(NA, NA))
plot.hollow <- rbind(plot.hollow, mat)
}
}
colnames(plot.base) <- colnames(plot.hollow) <- colnames(plot.filled) <- c("x", "y")
plot.base$x <- as.Date(as.numeric(plot.base$x))
plot.hollow$x <- as.Date(as.numeric(plot.hollow$x))
plot.filled$x <- as.Date(as.numeric(plot.filled$x))
hovertxt <- paste("Date: ", round(prices$time,2), "<br>",
"High: ", round(prices$high,2),"<br>",
"Low: ", round(prices$low,2),"<br>",
"Open: ", round(prices$open,2),"<br>",
"Close: ", round(prices$close,2))
# Base plot for High / Low prices
p <- plot_ly(plot.base, x = x, y = y, mode = "lines",
marker = list(color = '#9b9797'),
line = list(width = 1),
showlegend = F,
hoverinfo = "none")
# Trace for when open price > close price
p <- add_trace(p, data = plot.filled, x = x, y = y, mode = "lines",
marker = list(color = fillcolor),
line = list(width = linewidth),
showlegend = F,
hoverinfo = "none")
# Trace for when open price < close price
p <- add_trace(p, data = plot.hollow, x = x, y = y, mode = "lines",
marker = list(color = hollowcolor),
line = list(width = linewidth),
showlegend = F,
hoverinfo = "none")
# Trace for volume
p <- add_trace(p, data = prices, x = time, y = volume/1e6, type = "bar",
marker = list(color = "#ff9933"),
showlegend = F,
hoverinfo = "x+y",
yaxis = "y2")
# Trace for hover info
p <- add_trace(p, data = prices, x = time, y = high, opacity = 0, hoverinfo = "text",
text = hovertxt, showlegend = F)
# Layout options
p <- layout(p, xaxis = list(title = "", showgrid = F,
tickformat = "%b-%Y",
tickfont = list(color = fontcolor),
rangeselector = list(
x = 0.85, y = 0.97, bgcolor = "fontcolor",
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 yr",
step = "year",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(step = "all")))),
yaxis = list(title = "Price", gridcolor = "#8c8c8c",
tickfont = list(color = fontcolor),
titlefont = list(color = fontcolor),
domain = c(0.30, 0.95)),
yaxis2 = list(gridcolor = "#8c8c8c",
tickfont = list(color = fontcolor),
titlefont = list(color = fontcolor),
side = "right",
domain = c(0, 0.2)),
paper_bgcolor = papercolor,
plot_bgcolor = plotcolor,
margin = list(r = 50, t = 50),
annotations = list(
list(x = 0.02, y = 0.25, text = "Volume(mil)", ax = 0, ay = 0, align = "left",
xref = "paper", yref = "paper", xanchor = "left", yanchor = "top",
font = list(size = 20, color = fontcolor)),
list(x = 0, y = 1, text = symbol, ax = 0, ay = 0, align = "left",
xref = "paper", yref = "paper", xanchor = "left", yanchor = "top",
font = list(size = 20, color = fontcolor)),
list(x = 0.1, y = 1,
text = paste("Start: ", format(min(prices$time), "%b-%Y"),
"<br>End: ", format(max(prices$time), "%b-%Y")),
ax = 0, ay = 0, align = "left",
xref = "paper", yref = "paper", xanchor = "left", yanchor = "top",
font = list(size = 10, color = fontcolor))
))
return(p)
}
library(plotly)
library(quantmod)
plotlyCandleStick("TSLA")
library(plotly)
install.packages("plotly")
library(plotly)
library(quantmod)
plotlyCandleStick("TSLA")
?getSymbols
library(quantmod)
aaa <- getSymbols(aapl)
aaa <- getSymbols("AAPL")
aaa <- getSymbols("scty")
View(SCTY)
aaa <- getSymbols("scty", auto.assign = FALSE)
View(aaa)
class(aaa)
aaa$data
aaa
names(aaa)
aaa$SCTY.Volume
volume <- aaa$SCTY.Volume
volume <- aaa$SCTY.Volume{, 2}
aaa <- aaa[index(aaa) >= "2006-01-01"]
View(aaa)
index(aaa)
aaa <- aaa[index(aaa) >= "2016-01-01"]
View(aaa)
aaa[, 1]
df <- data.frame(time = index(aaa),
open = as.numeric(aaa[,1]),
high = as.numeric(aaa[,2]),
low = as.numeric(aaa[,3]),
close = as.numeric(aaa[,4]),
volume = as.numeric(aaa[,5]))
View(df)
df$volume
hist(df$volume)
hist(df$volume, breaks = 30)
plot(df$volume)
plot(df$volume, type = "l")
plot(df$time, df$volume, type = "l")
source('~/Dropbox/my_R_projects/quantmod/learn_from_example_1.R')
plotlyCandleStick("TSLA")
x <- 1:1000 / 1000
y <- sin(x)
plot(x, y)
x <- 1:1000 / 100
y <- sin(x)
plot(x, y)
library(ggplot2)
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun=function(x)x^2, geom="line", aes(colour="square")) +
stat_function(fun=exp, geom="line", aes(colour="exp")) +
scale_colour_manual("Function", value=c("blue","red"), breaks=c("square","exp"))
qplot(c(0, 2), stat = "function", fun = function(x)x^2, geom = "line")
?qplot
qplot(mpg, wt, data = mtcars)
qplot(mpg, wt, data = mtcars, colour = cyl)
qplot(mpg, wt, data = mtcars, size = cyl)
qplot(mpg, wt, data = mtcars, facets = vs ~ am)
qplot(mpg, wt, data = mtcars, colour = cyl, size = cyl)
qplot(mpg, wt, data = mtcars, colour = cyl, size = cyl)
qplot(wt, mpg, data = mtcars, colour = cyl, size = cyl)
qplot(mpg, wt, data = mtcars, facets = vs ~ am)
qplot(wt, mpg, data = mtcars, facets = vs ~ am)
mtcars
qplot(wt, mpg, data = mtcars, facets = vs ~ cyl)
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun=function(x)x^2, geom="line", aes(colour="square"))
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun=function(x)x^2, geom="line")
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun=function(x)x^2, geom="line", color = "red")
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun=function(x) sin(x), geom="line", color = "red")
ggplot(data.frame(x=c(0,10)), aes(x)) +
stat_function(fun=function(x) sin(x), geom="line", color = "red")
ggplot(data.frame(x=c(0,10)), aes(x)) +
stat_function(fun=function(x) sin(x), geom="point", color = "red")
ggplot(data.frame(x=c(0,10)), aes(x)) +
stat_function(fun=function(x) sin(x), geom="line", color = "red")
qplot(mpg, wt, data = mtcars, colour = cyl, size = cyl)
qplot(mpg, wt, data = mtcars, colour = cyl, size = cyl, geom = "line")
qplot(mpg, wt, data = mtcars, colour = cyl, size = cyl, geom = "point")
qplot(wt, mpg, data = mtcars, colour = cyl, size = cyl, geom = "point")
df <- data.frame(x = rnorm(100), y = rnorm(100))
library(ggplot2)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "武达盟",
hjust=1.1, vjust=-1.1, col="white", cex=6,
fontface = "bold", alpha = 0.3)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "武达盟",
hjust=1.1, vjust=-1.1, col="red", cex=6,
fontface = "bold", alpha = 0.3)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "我的水印在这儿",
hjust=1.1, vjust=-1.1, col="red", cex=6,
fontface = "bold", alpha = 0.3)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "我的水印在这儿",
hjust=1.1, vjust=-1.1, col="red", cex=6, size = 30,
fontface = "bold", alpha = 0.3)
?annotate
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "我的水印在这儿",
hjust=1.1, vjust=-1.1, col="red", cex=6, size = 3,
fontface = "bold", alpha = 0.3)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "我的水印在这儿",
hjust=1.1, vjust=-1.1, col="red", cex=10,
fontface = "bold", alpha = 0.3)
ggplot(df, aes(x, y)) +
geom_point() +
annotate("text", x = Inf, y = -Inf, label = "我的水印在这儿",
hjust=1.1, vjust=-1.1, col="red", cex=8,
fontface = "bold", alpha = 0.3)
library(ggplot2)
weekdays()
?weekdays
weekdays(1:7)
sample(1:7, 7)
df <- data.frame(weekday = c("Mon.", "Tues.", "Wed.", "Thur", "Fri.", "Sat", "Sun"),
value = sample(1:7, 7))
str(df)
ggplot(df, aes(weekday, value)) + geom_bar()
ggplot(df, aes(weekday, value)) + geom_bar(stat = "identity")
df$weekday <- factor(df$weekday, ordered = TRUE,
levels = c("Mon.", "Tues.", "Wed.", "Thur", "Fri.", "Sat", "Sun"))
ggplot(df, aes(weekday, value)) + geom_bar(stat = "identity")
df <- transform(df, weekday = reorder(weekday, -value))
ggplot(df, aes(weekday, value)) + geom_bar(stat = "identity")
?transform
transform(airquality, Ozone = -Ozone)
data("airquality")
view(airquality)
View(airquality)
df1 <- transform(df, new_col = -value)
View(df1)
df <- data.frame(weekday = c("Mon.", "Tues.", "Wed.", "Thur", "Fri.", "Sat", "Sun"),
value = 1:7)
df <- data.frame(weekday = c("Mon.", "Tues.", "Wed.", "Thur"),
value = c(1, 3, 4, 2))
df1 <- transform(df, new_col = -value)
View(df1)
df2 = transform(df, value = value)
View(df2)
df2 = transform(df, value = -value)
View(df2)
df <- data.frame(weekday = c("Mon.", "Tues.", "Wed.", "Thur"),
value = c(1, 3, 4, 2))
df2 = transform(df, value = order(value, value)
df2 = transform(df, value = order(value, value))
df2 = transform(df, value = order(value, value))
View(df2)
df2 = transform(df, value = reorder(value, value))
View(df2)
?reorder
bymedian <- with(InsectSprays, reorder(spray, count, median))
bymedian
boxplot(count ~ bymedian, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE,
col = "lightgray")
reorder(spray, count, median)
mtcars
reorder(letters[1:5], 5:1)
letters[1:5]
class(letters)
reorder(letters[1:5], (5:1)/10
reorder(letters[1:5], (5:1)/10)
bymedian <- with(InsectSprays, reorder(spray, count, median))
reorder(letters[1:5], (5:1)/10)
reorder(letters[1:5], 5:1/10)
installed.packages("RMarkdown")
summary(cars)
plot(pressure)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
library(tidyr)
library(data.table)
suicide_gun <- read_excel("gun_control/data_suicide_rate_gun_ownership.xlsx", skip = 1)
g <- ggplot(suicide_gun, aes(x = ownership, y = rate))
g + geom_point(aes(size = 总死亡数), alpha = 0.5, color = "red") +
xlab("枪支拥有率（%）") + ylab("十万人口死亡数") +
ggtitle("2013年美国各州自杀死亡人数和枪支拥有率的关系") +
geom_smooth(aes(weight = 总死亡数), method = "lm", se = FALSE,
linetype = 3, color = "orange") +
annotate("text", x = Inf, y = -Inf, label = "武达盟",
hjust=1.1, vjust=-1.1, col="white", cex=6,
fontface = "bold", alpha = 0.5)
ggsave("finished_figures/gun_ownership_vs_suicide.png", width = 5.5, height = 3.5)
killed <- read_excel("gun_control/numbers_killed_by_gun.xlsx", skip = 1)
killed_long <- gather(kill, 死亡原因, 数量, -c(年份, 总自杀数))
killed <- read_excel("gun_control/numbers_killed_by_gun.xlsx", skip = 1)
killed_long <- gather(killed, 死亡原因, 数量, -c(年份, 总自杀数))
killed_dt <- data.table(killed_long)
avg <- killed_dt[, .(死亡人数 = round(mean(数量))), by = 死亡原因][order(死亡人数)]
avg$死亡原因 <- factor(avg$死亡原因, ordered = TRUE, levels = avg$死亡原因)
ggplot(avg, aes(死亡原因, 死亡人数, label = 死亡人数)) +
geom_bar(stat = "identity", color = "red", fill = "red") +
geom_text(vjust = -1) +
ylim(c(0, 23000)) +
ggtitle("美国 2010 - 2014 平均每年枪击死亡人数") +
annotate("text", x = Inf, y = -Inf, label = "武达盟",
hjust=1.1, vjust=-1.1, col="white", cex=6,
fontface = "bold", alpha = 0.3)
ggsave("finished_figures/how_killed_by_gun.jpg", width = 5.5, height = 3.5)
ggplot(killed_long, aes(年份, 数量, color = 死亡原因)) +
geom_line() + geom_point()
library(readxl)
library(ggplot2)
library(tidyr)
library(data.table)
suicide_gun <- read_excel("gun_control/data_suicide_rate_gun_ownership.xlsx", skip = 1)
g <- ggplot(suicide_gun, aes(x = ownership, y = rate))
g + geom_point(aes(size = 总死亡数), alpha = 0.5, color = "red") +
xlab("枪支拥有率（%）") + ylab("十万人口死亡数") +
ggtitle("2013年美国各州自杀死亡人数和枪支拥有率的关系") +
geom_smooth(aes(weight = 总死亡数), method = "lm", se = FALSE,
linetype = 3, color = "orange") +
annotate("text", x = Inf, y = -Inf, label = "武达盟",
hjust=1.1, vjust=-1.1, col="white", cex=6,
fontface = "bold", alpha = 0.5)
ggsave("finished_figures/gun_ownership_vs_suicide.png", width = 5.5, height = 3.5)
ggplot(killed_long, aes(年份, 数量, color = 死亡原因)) +
geom_line() + geom_point()
ggsave("finished_figures/killed_by_gun_over_years.jpg", width = 5.5, height = 3.5)
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
library("shiny", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages(c("colorspace", "DBI", "digest", "evaluate", "googleVis", "jsonlite", "knitr", "maps", "R6", "Rcpp", "shiny", "shinydashboard", "stringi", "stringr", "tibble", "tidyr"))
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
library(ggplot2)
library(plotly)
library(ggplot2)
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat, size = ~carat,
text = ~paste("Clarity:", clarity))
?plot_ly
x <- 2
f1 <- function() {
y <- 1
c(x, y)
}
f1
f1()
j <- function(x) {
y <- 2
function() {  # This function is the last unit of function j(), therefore
c(x, y)     # is the return of j()
}             #
}
`+`(1, 2)  # 3, equals to 1 + 2
`for`(i, 1:2, print(i))  # same s for (i in 1:2) print(i)
x <- 1:3
x[2]
`[`(x, 2) # that is why half [ is called an operator
{print(1); print(2); print(3)}
`{`(print(1), print(2), print(3))
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
sapply(x, function(x) x[2])
args <- list(1:10, na.rm = TRUE)
do.call(mean, args)  # 5.5
f <- function(x) {
10
}
f(stop("this is an error"))  # 10, argument ignored
f <- function(x) {
x
10
}
f(stop("this is an error"))  # Error in f(stop("this is an error")) : this is an error
?sum
sum(1:5)
sum(1:5, 9)
f <- function(x) {
x$a <- 2
return(x)
}
x <- list(a = 1)
f(x)  # 2
x  # 1
methods(mean())
methods(mean
)
a <- rnorm(100); b <- 2 * a; df <- data.frame(x = a, y = b)
fit <- lm(formula = y ~ x, data = df)
otype(fit)  # S3
type(fit)  # S3
tpe(fit)  # S3
class(fit)  # lm
otype(fit)  # S3
pryr::otype(fit)  # S3
install.packages("pryr")
install.packages("pryr")
pryr::otype(fit)  # S3
methods(class = "lm")
print(fit)
plot(fit)  # show plots in plot console
env <- new.env()
env$a <- FALSE
env$b <- "aaa"
env$c <- 1:3
env$d <- 1.2
globalenv()  # <environment: R_GlobalEnv>
env
env$a
baseenv()
search()
e <- new.env()
e$a <- 1
e$b <- 2
parent.env(e)  # <environment: R_GlobalEnv>
ls(e)  # [1] "a" "b"
ls.str(e)
ls(env)
identical(1, 1)
setwd("~/Dropbox/shiny_server_dropbox_step_1/main")
shiny::runApp()
runApp()
runApp()
runApp()
match(1:3, 2:7)
