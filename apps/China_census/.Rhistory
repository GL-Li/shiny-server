qnorm(0.1)
qnorm(0.01)
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper <- samp_mean + 1.96 * samp_sd / sqrt(n)
plot_ci(lower, upper, mean(population))
?plot_ci
View(plot_ci)
library(ggplot2)
treat <- c(rep(1, 10), rep(0, 33))
control <- c(rep(1,2), rep(0, 44))
mean(treat)
sd(treat)
mean(control)
sd(control)
mt <- mean(treat)
sdt <- sd(treat)
se <- sdt /sqrt(43)
se
mt
sdc <- sd(control)
sdc
sec <- sdc / sqrt(46)
sec
se <- 4.65 / sqrt(40)
z <- 0.9 / se
pnorm(z)
0.081/0.0992
qnorm(0.1)
4 / qnorm(0.1)
18 / 3.121217 -> a
a^2
pnorm(-2) * 2
pt(-22, df = 50)
pt(-2, df = 50) * 2
pt(-2, df = 10) * 2
pnorm(-2) * 2
pt(-2, df = 50) * 2
pt(-2, df = 10) * 2
qt(0.025, 21)
abs(qt(0.025, 21))
pt(2.3, 21) * 2
pt(-2.3, 21) * 2
qt(0.025, 21)
pt(-2.24) * 2
pt(-2.24, 21) * 2
2 * pt(-0.87, 199)
qnorm(-0.1)
qnorm(0.1)
qnorm(0.2)
globalenv()  # <environment: R_GlobalEnv>
baseenv()  # <environment: base>
emptyenv()  # <environment: R_EmptyEnv>
environment()  # <environment: R_GlobalEnv>, happen to be global this time
search()
as.environment("package:knitr")
library(knitr)
opts_chunk$set(eval=FALSE)
as.environment("package:knitr")
e <- new.env()
# add bindings
e$a <- 1
e$b <- 2
parent.env(e)  # <environment: R_GlobalEnv>
ls(e)  # [1] "a" "b"
# another way
ls.str(e)
e$a  # [1] 1
# or
e[["a"]]  # [1] 1
# or
get("a", envir=e)  # [1] 1
```
**delete objects from environment** is a little different
```{r}
rm("a", envir=e)
ls(e)  # [1] "b"
exists("x", envir=e)  # [1] TRUE
x <- 10
exists("x", envir=e)  # [1] TRUE
exists("x", envir=e, inherits=FALSE)  # [1] FALSE
identical(globalenv(), environment())  # [1] TRUE
currentEnv <- globalenv()
notEmpty <- TRUE
while (notEmpty) {
currentEnv <- parent.env(currentEnv)
if (identical(currentEnv, baseenv())) print("baseenv() is an ancesstor of globalenv()")
if (identical(currentEnv, emptyenv())) {
print("emptyenv() is an ancesstor of globalenv()")
notEmpty <- FALSE
}
}
mySearch <- function(envir = globalenv()) {
currentEnv <- envir
notEmpty <- TRUE
# extract environment name
parent <- environmentName(envir)
while (notEmpty) {
currentEnv <- parent.env(currentEnv)
parent <- c(parent, environmentName(currentEnv))
if (identical(currentEnv, emptyenv())) {
notEmpty <- FALSE
}
}
return(parent)
}
mySearch()
install.packages("pryr")
library(pryr)
x <- 5
where(x)
where("x")
where("mean")
?parent.frame
where("bbb")
560*0.15
sqrt(0.7*0.3/50)
sum <- 50
7/50 * 24
source("http://bit.ly/dasi_inference")
load(url("http://www.openintro.org/stat/data/atheism.RData"))
View(atheism)
us12 = subset(atheism, atheism$nationality == "United States" & atheism$year == "2012")
View(us12)
mean(us12$response == "atheist")
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
(0.0634 - 0.0364) / 2
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2*sqrt(p*(1 - p)/n)
plot(me ~ p)
spain <- atheism[atheism$nationality == "spain",]
spain <- atheism[atheism$nationality == "Spain",]
sqrt(0.1 * 0.9 / 2291)
finland <- atheism[atheism$nationality == "Finland",]
sqrt(0.07*0.93 / 1969)
0.25 / (0.01/1.96)
0.25 / (0.01/1.96)^2
?pt
pt(9.559, 30)
pt(-9.559, 30)
pt(-9.559, 30) * 2
nrow(ntcars)
nrow(mtcars)
install.packages("maps")
install.packages("ggmap")
install.packages("jsonlite")
source('~/.active-rstudio-document')
data <- data.frame(
val1 = c(5, 9 ,2),
val2 = c(2, 1, 3),
val3 = c(6, 5, 5),
val4 = c(7, 7, 7),
val5 = c(2, 6, 1)
)
v2 <- data$val2
v3 <- data$val3
v4 <- data$val4
data$result <- v2*2/v3 + max(max(v2,v3),v4)
View(data)
data <- data.frame(
val1 = c(5, 9 ,2),
val2 = c(2, 3, 10),
val3 = c(4, 2, 5),
val4 = c(7, 7, 7),
val5 = c(2, 6, 1)
)
v2 <- data$val2
v3 <- data$val3
v4 <- data$val4
data$result <- v2*2/v3 + max(max(v2,v3),v4)
View(data)
install.packages("ggplot2")
shiny::runApp('my_R_projects/China_2010_cencus/shiny_English')
setwd("C:/Users/GL/Dropbox/my_R_projects/China_2010_cencus/shiny_English")
shiny::runApp()
